AWSTemplateFormatVersion: '2010-09-09'
Description: DNS Validated ACM Certificate Example
Outputs:
  CertificateARN:
    Description: The ARN of the example certificate
    Value: !Ref 'ExampleCertificate'
Resources:
  CustomAcmCertificateLambda:
    Properties:
      Code:
        ZipFile: "b='PhysicalResourceId'\nc='Tags'\nd='Status'\ne='ValidationMethod'\n\
          f='.'\ng='ResourceRecord'\nh='I'\ni='DomainName'\nj='DomainValidationOptions'\n\
          k='OldResourceProperties'\nm='RequestType'\nn='SUCCESS'\no='DNS'\np='Certificate'\n\
          q='PENDING_VALIDATION'\nr='ValidationStatus'\ns='Name'\nt='Type'\nu='Value'\n\
          w='ResourceProperties'\nx='FAILED'\ny='None'\nimport time\nimport boto3\n\
          import hashlib\nimport json\nimport copy\nimport logging\nfrom botocore.vendored\
          \ import requests\nacm=boto3.client('acm')\nl=logging.getLogger()\nl.setLevel(logging.INFO)\n\
          def send(event):\n\tl.info(event);requests.put(event['ResponseURL'],json=event)\n\
          def create_cert(props,i_token):\n\ta=copy.copy(props);del a['ServiceToken']\n\
          \tif c in props:del a[c]\n\tif e in props:\n\t\tif props[e]==o:\n\t\t\t\
          try:\n\t\t\t\tfor name in set([props[i]]+props.get('SubjectAlternativeNames',[])):get_zone_for(name,props)\n\
          \t\t\texcept KeyError:raise RuntimeError('DomainValidationOptions missing')\n\
          \t\t\tdel a[j]\n\t\telif props[e]=='EMAIL':del a[e]\n\treturn acm.request_certificate(IdempotencyToken=i_token,**a)['CertificateArn']\n\
          def add_tags(arn,props):\n\tif c in props:acm.add_tags_to_certificate(CertificateArn=arn,Tags=props[c])\n\
          def get_zone_for(name,props):\n\tname=name.rstrip(f);hosted_zones={v[i].rstrip(f):v['HostedZoneId']for\
          \ v in (props[j])};components=name.split(f)\n\twhile len(components):\n\t\
          \tif f.join(components)in hosted_zones:return hosted_zones[f.join(components)]\n\
          \t\tcomponents=components[1:]\n\traise RuntimeError('DomainValidationOptions\
          \ missing for %s'%str(name))\ndef validate(arn,props):\n\tif e in props\
          \ and props[e]==o:\n\t\tall_records_created=False\n\t\twhile not all_records_created:\n\
          \t\t\tall_records_created=True;certificate=acm.describe_certificate(CertificateArn=arn)[p];l.info(certificate)\n\
          \t\t\tif certificate[d]!=q:return\n\t\t\tfor v in certificate[j]:\n\t\t\t\
          \tif r not in v or g not in v:\n\t\t\t\t\tall_records_created=False;continue\n\
          \t\t\t\trecords=[]\n\t\t\t\tif v[r]==q:records.append({'Action':'UPSERT','ResourceRecordSet':{s:v[g][s],t:v[g][t],'TTL':60,'ResourceRecords':[{u:v[g][u]}]}})\n\
          \t\t\t\tif records:\n\t\t\t\t\tresponse=boto3.client('route53').change_resource_record_sets(HostedZoneId=get_zone_for(v[i],props),ChangeBatch={'Comment':'Domain\
          \ validation for %s'%arn,'Changes':records});l.info(response)\n\t\t\ttime.sleep(1)\n\
          def replace_cert(event):\n\told=copy.copy(event[k])\n\tif c in old:del old[c]\n\
          \tnew=copy.copy(event[w])\n\tif c in new:del new[c]\n\treturn old!=new\n\
          def wait_for_issuance(arn,context):\n\twhile context.get_remaining_time_in_millis()/1000>30:\n\
          \t\tcertificate=acm.describe_certificate(CertificateArn=arn)[p];l.info(certificate)\n\
          \t\tif certificate[d]=='ISSUED':return True\n\t\telif certificate[d]==x:raise\
          \ RuntimeError(certificate.get('FailureReason','Failed to issue certificate'))\n\
          \t\ttime.sleep(5)\n\treturn False\ndef reinvoke(event,context):\n\tevent[h]=event.get(h,0)+1\n\
          \tif event[h]>8:raise RuntimeError('Certificate not issued in time')\n\t\
          l.info('Reinvoking for the %i time'%event[h]);l.info(event);boto3.client('lambda').invoke(FunctionName=context.invoked_function_arn,InvocationType='Event',Payload=json.dumps(event).encode())\n\
          def handler(event,context):\n\tl.info(event)\n\ttry:\n\t\ti_token=hashlib.new('md5',(event['RequestId']+event['StackId']).encode()).hexdigest();props=event[w]\n\
          \t\tif event[m]=='Create':\n\t\t\tevent[b]=y;event[b]=create_cert(props,i_token);add_tags(event[b],props);validate(event[b],props)\n\
          \t\t\tif wait_for_issuance(event[b],context):\n\t\t\t\tevent[d]=n;return\
          \ send(event)\n\t\t\telse:return reinvoke(event,context)\n\t\telif event[m]=='Delete':\n\
          \t\t\tif event[b]!=y:acm.delete_certificate(CertificateArn=event[b])\n\t\
          \t\tevent[d]=n;return send(event)\n\t\telif event[m]=='Update':\n\t\t\t\
          if replace_cert(event):\n\t\t\t\tevent[b]=create_cert(props,i_token);add_tags(event[b],props);validate(event[b],props)\n\
          \t\t\t\tif not wait_for_issuance(event[b],context):return reinvoke(event,context)\n\
          \t\t\telse:\n\t\t\t\tif c in event[k]:acm.remove_tags_from_certificate(CertificateArn=event[b],Tags=event[k][c])\n\
          \t\t\t\tadd_tags(event[b],props)\n\t\t\tevent[d]=n;return send(event)\n\t\
          \telse:raise RuntimeError('Unknown RequestType')\n\texcept Exception as\
          \ ex:\n\t\tl.exception('');event[d]=x;event['Reason']=str(ex);return send(event)\n\
          \n"
      Description: Cloudformation custom resource for DNS validated certificates
      Handler: index.handler
      Role: !GetAtt 'CustomAcmCertificateLambdaExecutionRole.Arn'
      Runtime: python3.6
      Timeout: 300
    Type: AWS::Lambda::Function
  CustomAcmCertificateLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - acm:AddTagsToCertificate
                  - acm:DeleteCertificate
                  - acm:DescribeCertificate
                  - acm:RemoveTagsFromCertificate
                  - acm:RequestCertificate
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:acm:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :certificate/*
              - Action:
                  - acm:RequestCertificate
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource:
                  - arn:aws:route53:::hostedzone/*
            Version: '2012-10-17'
          PolicyName: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - CustomAcmCertificateLambdaExecutionPolicy
    Type: AWS::IAM::Role
  ExampleCertificate:
    Properties:
      DomainName: test.example.com
      DomainValidationOptions:
        - DomainName: test.example.com
          HostedZoneId: Z2KZ5YTUFZNC7H
      ServiceToken: !GetAtt 'CustomAcmCertificateLambda.Arn'
      Tags:
        - Key: Name
          Value: Example Certificate
      ValidationMethod: DNS
    Type: AWS::CloudFormation::CustomResource
