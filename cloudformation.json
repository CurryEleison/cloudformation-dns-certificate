{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "DNS Validated ACM Certificate Example",
    "Outputs": {
        "CertificateARN": {
            "Description": "The ARN of the example certificate",
            "Value": {
                "Ref": "ExampleCertificate"
            }
        }
    },
    "Resources": {
        "CustomAcmCertificateLambda": {
            "Metadata": {
                "Source": "https://github.com/dflook/cloudformation-dns-certificate",
                "Version": "1.6.0"
            },
            "Properties": {
                "Code": {
                    "ZipFile": "H=RuntimeError\nimport copy as L,hashlib as m,json,logging as B,time as S\nfrom boto3 import client as M\nfrom botocore.exceptions import ClientError as n,ParamValidationError as o\nfrom botocore.vendored import requests as p\nA=B.getLogger()\nA.setLevel(B.INFO)\nC=A.info\nT=A.exception\ndef handler(e,c):\n\tA1='None';A0='FAILED';z='stack-id';y='logical-id';x=' missing';w='DNS';v='Region';l='RequestType';k='Old';j='Certificate';i=True;h='LogicalResourceId';g='DomainName';f='Route53RoleArn';X='StackId';W='Key';V='ValidationMethod';R='Status';Q='Reinvoked';P='cloudformation:';O='DomainValidationOptions';K='ResourceProperties';J='Value';I=None;G=False;F='CertificateArn';E='Tags';A='PhysicalResourceId';C(e)\n\tdef Y():\n\t\tA=L.copy(B);del A['ServiceToken'];A.pop(v,I);A.pop(E,I);A.pop(f,I)\n\t\tif V in B:\n\t\t\tif B[V]==w:\n\t\t\t\ttry:\n\t\t\t\t\tfor C in set([B[g]]+B.get('SubjectAlternativeNames',[])):d(C)\n\t\t\t\texcept KeyError:raise H(O+x)\n\t\t\t\tdel A[O]\n\t\treturn D.request_certificate(IdempotencyToken=t,**A)[F]\n\tdef q(a):\n\t\tG='Error';E='Failed to delete certificate';A=E\n\t\twhile c.get_remaining_time_in_millis()/1000>30:\n\t\t\ttry:D.delete_certificate(**{F:a});return\n\t\t\texcept n as B:\n\t\t\t\tT(E);C=B.response[G]['Code'];A=B.response[G]['Message']\n\t\t\t\tif C=='ResourceInUseException':S.sleep(5);continue\n\t\t\t\telif C in['ResourceNotFoundException','ValidationException']:return\n\t\t\t\traise\n\t\t\texcept o:T(E);return\n\t\traise H(A)\n\tdef r(a):\n\t\tif a.startswith('arn:'):return a\n\t\tfor C in D.get_paginator('list_certificates').paginate():\n\t\t\tfor A in C['CertificateSummaryList']:\n\t\t\t\tB={B[W]:B[J]for B in(D.list_tags_for_certificate(**{F:A[F]})[E])}\n\t\t\t\tif B.get(P+y)==e[h]and B.get(P+z)==e[X]:return A[F]\n\t\treturn a\n\tdef Z():\n\t\tif e.get(Q,G):raise H('Certificate not issued in time')\n\t\te[Q]=i;C(Q);C(e);M('lambda').invoke(FunctionName=c.invoked_function_arn,InvocationType='Event',Payload=json.dumps(e).encode())\n\tdef a(a):\n\t\twhile c.get_remaining_time_in_millis()/1000>30:\n\t\t\tA=D.describe_certificate(**{F:a})[j];C(A)\n\t\t\tif A[R]=='ISSUED':return i\n\t\t\telif A[R]==A0:raise H(A.get('FailureReason','Failed to issue certificate'))\n\t\t\tS.sleep(5)\n\t\treturn G\n\tdef s():A=L.copy(e[k+K]);A.pop(E,I);B=L.copy(e[K]);B.pop(E,I);return A!=B\n\tdef b():\n\t\tZ='Type';Y='Name';X='HostedZoneId';W='ValidationStatus';U='PENDING_VALIDATION';N='ResourceRecord'\n\t\tif V in B and B[V]==w:\n\t\t\tH=G\n\t\t\twhile not H:\n\t\t\t\tH=i;K=D.describe_certificate(**{F:e[A]})[j];C(K)\n\t\t\t\tif K[R]!=U:return\n\t\t\t\tfor E in K[O]:\n\t\t\t\t\tif W not in E or N not in E:H=G;continue\n\t\t\t\t\tif E[W]==U:P=d(E[g]);Q=P.get(f,B.get(f));L=M('sts').assume_role(RoleArn=Q,RoleSessionName=(j+e[h])[:64],DurationSeconds=900)['Credentials']if Q is not I else{};T=M('route53',aws_access_key_id=L.get('AccessKeyId'),aws_secret_access_key=L.get('SecretAccessKey'),aws_session_token=L.get('SessionToken')).change_resource_record_sets(**{X:P[X],'ChangeBatch':{'Comment':'Domain validation for '+e[A],'Changes':[{'Action':'UPSERT','ResourceRecordSet':{Y:E[N][Y],Z:E[N][Z],'TTL':60,'ResourceRecords':[{J:E[N][J]}]}}]}});C(T)\n\t\t\t\tS.sleep(1)\n\tdef d(n):\n\t\tC='.';n=n.rstrip(C);D={A[g].rstrip(C):A for A in(B[O])};A=n.split(C)\n\t\twhile len(A):\n\t\t\tif C.join(A)in D:return D[C.join(A)]\n\t\t\tA=A[1:]\n\t\traise H(O+x+' for '+n)\n\tdef U(a):A=L.copy(e[K].get(E,[]));A+=[{W:P+y,J:e[h]},{W:P+z,J:e[X]},{W:P+'stack-name',J:e[X].split('/')[1]}];D.add_tags_to_certificate(**{F:a,E:A})\n\tdef N():C(e);A=p.put(e['ResponseURL'],json=e,headers={'content-type':''});C(A.content);A.raise_for_status()\n\ttry:\n\t\tt=m.new('md5',(e['RequestId']+e[X]).encode()).hexdigest();B=e[K];D=M('acm',region_name=B.get(v));e[R]='SUCCESS'\n\t\tif e[l]=='Create':\n\t\t\tif e.get(Q,G)is G:e[A]=A1;e[A]=Y();U(e[A])\n\t\t\tb()\n\t\t\tif a(e[A]):return N()\n\t\t\telse:return Z()\n\t\telif e[l]=='Delete':\n\t\t\tif e[A]!=A1:q(r(e[A]))\n\t\t\treturn N()\n\t\telif e[l]=='Update':\n\t\t\tif s():\n\t\t\t\tif e.get(Q,G)is G:e[A]=Y();U(e[A])\n\t\t\t\tb()\n\t\t\t\tif not a(e[A]):return Z()\n\t\t\telse:\n\t\t\t\tif E in e[k+K]:D.remove_tags_from_certificate(**{F:e[A],E:e[k+K][E]})\n\t\t\t\tU(e[A])\n\t\t\treturn N()\n\t\telse:raise H('Unknown RequestType')\n\texcept Exception as u:T('');e[R]=A0;e['Reason']=str(u);return N()"
                },
                "Description": "Cloudformation custom resource for DNS validated certificates",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "CustomAcmCertificateLambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 900
            },
            "Type": "AWS::Lambda::Function"
        },
        "CustomAcmCertificateLambdaExecutionRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
                ],
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "acm:AddTagsToCertificate",
                                        "acm:DeleteCertificate",
                                        "acm:DescribeCertificate",
                                        "acm:RemoveTagsFromCertificate"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:acm:*:${AWS::AccountId}:certificate/*"
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "acm:RequestCertificate",
                                        "acm:ListTagsForCertificate",
                                        "acm:ListCertificates"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "route53:ChangeResourceRecordSets"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:route53:::hostedzone/*"
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": {
                            "Fn::Sub": "${AWS::StackName}CustomAcmCertificateLambdaExecutionPolicy"
                        }
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ExampleCertificate": {
            "Properties": {
                "DomainName": "test.example.com",
                "DomainValidationOptions": [
                    {
                        "DomainName": "test.example.com",
                        "HostedZoneId": "Z2KZ5YTUFZNC7H"
                    }
                ],
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomAcmCertificateLambda",
                        "Arn"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Example Certificate"
                    }
                ],
                "ValidationMethod": "DNS"
            },
            "Type": "Custom::DNSCertificate"
        }
    }
}